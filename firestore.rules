/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for habit tracking data.
 * All data is nested under /users/{userId}, ensuring that users can only access their own information.
 *
 * Data Structure:
 * - /users/{userId}/habits/{habitId}: Stores individual habit documents for a specific user.
 * - /users/{userId}/habitLogs/{habitLogId}: Stores completion logs for a user's habits.
 *
 * Key Security Decisions:
 * - Users can only read and write their own habits and habit logs.
 * - Listing of users is not permitted.
 * - Data shape validation is relaxed during this prototyping phase to allow for rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing resource.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Rules for user documents and subcollections.
     * @path /users/{userId}
     * @allow (create) - A user can create their own document if the userId matches their auth.uid.
     * @deny (create) - A user cannot create a document with a userId that doesn't match their auth.uid.
     * @principle Enforces user-ownership for all user data.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      /**
       * @description Rules for habits belonging to a specific user.
       * @path /users/{userId}/habits/{habitId}
       * @allow (create) - A user can create a new habit under their own user ID.
       * @allow (get) - A user can retrieve their own habit.
       * @allow (update) - A user can update their own existing habit.
       * @allow (delete) - A user can delete their own existing habit.
       * @deny (create) - A user cannot create habits under another user's ID.
       * @deny (update) - A user cannot update habits under another user's ID.
       * @deny (delete) - A user cannot delete habits under another user's ID.
       * @principle Enforces document ownership for writes.
       */
      match /habits/{habitId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && exists(resource);
        allow delete: if isOwner(userId) && exists(resource);
      }

      /**
       * @description Rules for habit logs belonging to a specific user.
       * @path /users/{userId}/habitLogs/{habitLogId}
       * @allow (create) - A user can create a new habit log under their own user ID.
       * @allow (get) - A user can retrieve their own habit log.
       * @allow (update) - A user can update their own existing habit log.
       * @allow (delete) - A user can delete their own existing habit log.
       * @deny (create) - A user cannot create habit logs under another user's ID.
       * @deny (update) - A user cannot update habit logs under another user's ID.
       * @deny (delete) - A user cannot delete habit logs under another user's ID.
       * @principle Enforces document ownership for writes.
       */
      match /habitLogs/{habitLogId} {
        allow get: if isOwner(userId);
        allow list: if false;
        allow create: if isOwner(userId);
        allow update: if isOwner(userId) && exists(resource);
        allow delete: if isOwner(userId) && exists(resource);
      }
    }
  }
}