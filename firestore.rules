/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation.  Habits and habitLogs are stored as subcollections
 * under each user's document.
 *
 * Key Security Decisions:
 * - Listing of all users is disallowed.
 * - All write operations require a valid, authenticated user.
 * - Data validation is relaxed to allow rapid prototyping, focusing on authorization.
 *
 * Denormalization for Authorization:
 *  - Ownership is validated by matching the `userId` in the path against `request.auth.uid`.  No additional `get()` calls
 *    are necessary to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    match /users/{userId} {
      /**
       * @description Controls access to user documents.
       * @path /users/{userId}
       * @allow (create) If the user is creating their own document.
       * @deny (create) If the user is trying to create a document for another user.
       * @allow (get) If the user is requesting their own document.
       * @deny (get) If the user is requesting another user's document.
       * @principle Enforces document ownership.
       */
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      match /habits/{habitId} {
        /**
         * @description Controls access to habit documents for a specific user.
         * @path /users/{userId}/habits/{habitId}
         * @allow (create) If the user is creating a habit for themselves.
         * @deny (create) If the user is trying to create a habit for another user.
         * @allow (get) If the user is requesting their own habit.
         * @deny (get) If the user is requesting another user's habit.
         * @principle Enforces document ownership for habits.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }

      match /habitLogs/{habitLogId} {
        /**
         * @description Controls access to habit log documents for a specific user.
         * @path /users/{userId}/habitLogs/{habitLogId}
         * @allow (create) If the user is creating a habit log for themselves.
         * @deny (create) If the user is trying to create a habit log for another user.
         * @allow (get) If the user is requesting their own habit log.
         * @deny (get) If the user is requesting another user's habit log.
         * @principle Enforces document ownership for habit logs.
         */
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
      }
    }
  }
}